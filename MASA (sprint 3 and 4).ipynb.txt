{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a1a6147-f0d0-4623-a8db-81840a2675c8",
   "metadata": {},
   "source": [
    "**Import packages**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a53e10f6-c5b9-465f-bc31-78b2a8863f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_selection import mutual_info_classif as MIC\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import RidgeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c06e710a-c7b8-4236-8643-7677acd3c376",
   "metadata": {},
   "source": [
    "**Read data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4314795a-627d-472c-8b18-d671ff4658e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>Agency Type</th>\n",
       "      <th>Distribution Channel</th>\n",
       "      <th>Product Name</th>\n",
       "      <th>Claim</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Net Sales</th>\n",
       "      <th>Commision (in value)</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CBH</td>\n",
       "      <td>Travel Agency</td>\n",
       "      <td>Offline</td>\n",
       "      <td>Comprehensive Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>186</td>\n",
       "      <td>MALAYSIA</td>\n",
       "      <td>-29.0</td>\n",
       "      <td>9.57</td>\n",
       "      <td>F</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CBH</td>\n",
       "      <td>Travel Agency</td>\n",
       "      <td>Offline</td>\n",
       "      <td>Comprehensive Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>186</td>\n",
       "      <td>MALAYSIA</td>\n",
       "      <td>-29.0</td>\n",
       "      <td>9.57</td>\n",
       "      <td>F</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CWT</td>\n",
       "      <td>Travel Agency</td>\n",
       "      <td>Online</td>\n",
       "      <td>Rental Vehicle Excess Insurance</td>\n",
       "      <td>No</td>\n",
       "      <td>65</td>\n",
       "      <td>AUSTRALIA</td>\n",
       "      <td>-49.5</td>\n",
       "      <td>29.70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Agency    Agency Type Distribution Channel                     Product Name  \\\n",
       "0    CBH  Travel Agency              Offline               Comprehensive Plan   \n",
       "1    CBH  Travel Agency              Offline               Comprehensive Plan   \n",
       "2    CWT  Travel Agency               Online  Rental Vehicle Excess Insurance   \n",
       "\n",
       "  Claim  Duration Destination  Net Sales  Commision (in value) Gender  Age  \n",
       "0    No       186    MALAYSIA      -29.0                  9.57      F   81  \n",
       "1    No       186    MALAYSIA      -29.0                  9.57      F   71  \n",
       "2    No        65   AUSTRALIA      -49.5                 29.70    NaN   32  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import and read excel file with first row as header names \n",
    "df = pd.read_excel(\"[MASA Hackathon 2022] Travel Insurance Data Set .xlsx\", header=0)\n",
    "\n",
    "# View first 3 rows of the data\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "38f834a6-0a45-4758-ad5d-7c19bad99ca6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Net Sales</th>\n",
       "      <th>Commision (in value)</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>63326.000000</td>\n",
       "      <td>63326.000000</td>\n",
       "      <td>63326.000000</td>\n",
       "      <td>63326.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>49.317074</td>\n",
       "      <td>40.702018</td>\n",
       "      <td>9.809992</td>\n",
       "      <td>39.969981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>101.791566</td>\n",
       "      <td>48.845637</td>\n",
       "      <td>19.804388</td>\n",
       "      <td>14.017010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-389.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>26.530000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>53.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>11.550000</td>\n",
       "      <td>43.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4881.000000</td>\n",
       "      <td>810.000000</td>\n",
       "      <td>283.500000</td>\n",
       "      <td>118.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Duration     Net Sales  Commision (in value)           Age\n",
       "count  63326.000000  63326.000000          63326.000000  63326.000000\n",
       "mean      49.317074     40.702018              9.809992     39.969981\n",
       "std      101.791566     48.845637             19.804388     14.017010\n",
       "min       -2.000000   -389.000000              0.000000      0.000000\n",
       "25%        9.000000     18.000000              0.000000     35.000000\n",
       "50%       22.000000     26.530000              0.000000     36.000000\n",
       "75%       53.000000     48.000000             11.550000     43.000000\n",
       "max     4881.000000    810.000000            283.500000    118.000000"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View summary statistics of the dataset \n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5360fdd2-7191-4e86-9b37-32fa97edadd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace space with underline\n",
    "df.columns = df.columns.str.replace(\" \", \"_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f762c214-6374-4c98-a57a-10d9c0020cc2",
   "metadata": {},
   "source": [
    "**3.0 Feature selection and engineering**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c3ec2897-48d9-4c2a-bef5-2cfba3e4a6d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender: 71.23%\n"
     ]
    }
   ],
   "source": [
    "# Statistics of missing values by iterating over all the columns and compute missing values \n",
    "for col in df.columns:\n",
    "    # Compute the number of missing value \n",
    "    missing_percent = df[col].isna().mean() * 100\n",
    "    \n",
    "    # Compute missing values ig missing value exists \n",
    "    if missing_percent > 0:\n",
    "            print(f\"{col}: {round(missing_percent, 2)}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0dfa930-5056-4d63-8165-b3be26ba1038",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.1 Missing value treatment \n",
    "# Drop gender column as it as \n",
    "df.drop([\"Gender\"], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cba67ed8-e3b7-44f4-839e-bd430b0a0fa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.2 Outlier analysis \n",
    "df.plot(kind=\"box\", subplots=True, layout=(3,3), figsize=(10,10));\n",
    "\n",
    "#Duration: Many outliers detected that deviate far from the boxplot\n",
    "#Net Sales: One outlier detected at the right whiskers\n",
    "#Commision: Few outliers detected indicating abnormal high commision,possible cause of high net sales recorded\n",
    "#Age: One extreme outlier indicated, possible finding at previous describe with maximum age 118"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c76b1e6-879c-4875-8e1b-f3e00f1e0a4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable Duration\n",
      "Lower quartile -57.00\n",
      "Upper quartile 119.00\n",
      "\n",
      "Variable Net_Sales\n",
      "Lower quartile -27.00\n",
      "Upper quartile 93.00\n",
      "\n",
      "Variable Commision_(in_value)\n",
      "Lower quartile -17.33\n",
      "Upper quartile 28.88\n",
      "\n",
      "Variable Age\n",
      "Lower quartile 23.00\n",
      "Upper quartile 55.00\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Iterate over numeric columns and compute the outliers\n",
    "for i in df.select_dtypes([np.int64, np.float64]).columns:\n",
    "    # Interquartile range \n",
    "    Q1 = df[i].quantile(0.25)\n",
    "    Q3 = df[i].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "\n",
    "    # Find outliers in column\n",
    "    outlier = ((df[i] < (Q1 - 1.5 * IQR)) | (df[i] > (Q3 + 1.5 * IQR)))\n",
    "    print(f\"Variable {i}\")\n",
    "    print(f\"Lower quartile {Q1 - 1.5 * IQR:.2f}\")\n",
    "    print(f\"Upper quartile {Q3 + 1.5 * IQR:.2f}\\n\")\n",
    "    df[i].describe()\n",
    "    outliers=df[outlier]\n",
    "    outliers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9c52a7f9-fecf-4032-a87e-b26435d03f1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>Agency_Type</th>\n",
       "      <th>Distribution_Channel</th>\n",
       "      <th>Product_Name</th>\n",
       "      <th>Claim</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Net_Sales</th>\n",
       "      <th>Commision_(in_value)</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>JZI</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Basic Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>33</td>\n",
       "      <td>KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF</td>\n",
       "      <td>-26.0</td>\n",
       "      <td>9.10</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>11</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>50.0</td>\n",
       "      <td>20.00</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>62.0</td>\n",
       "      <td>24.80</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>16</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>50.0</td>\n",
       "      <td>20.00</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>CCR</td>\n",
       "      <td>Travel Agency</td>\n",
       "      <td>Offline</td>\n",
       "      <td>Comprehensive Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>5</td>\n",
       "      <td>MALAYSIA</td>\n",
       "      <td>29.0</td>\n",
       "      <td>9.57</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62920</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>31.0</td>\n",
       "      <td>12.40</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62953</th>\n",
       "      <td>ART</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>14</td>\n",
       "      <td>FRANCE</td>\n",
       "      <td>59.0</td>\n",
       "      <td>20.65</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63096</th>\n",
       "      <td>ART</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>42</td>\n",
       "      <td>HONG KONG</td>\n",
       "      <td>61.0</td>\n",
       "      <td>21.35</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63182</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>21</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>39.0</td>\n",
       "      <td>15.60</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63183</th>\n",
       "      <td>JWT</td>\n",
       "      <td>Airlines</td>\n",
       "      <td>Online</td>\n",
       "      <td>Value Plan</td>\n",
       "      <td>No</td>\n",
       "      <td>49</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>31.0</td>\n",
       "      <td>12.40</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>984 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency    Agency_Type Distribution_Channel        Product_Name Claim  \\\n",
       "10       JZI       Airlines               Online          Basic Plan    No   \n",
       "105      JWT       Airlines               Online          Value Plan    No   \n",
       "220      JWT       Airlines               Online          Value Plan    No   \n",
       "367      JWT       Airlines               Online          Value Plan    No   \n",
       "402      CCR  Travel Agency              Offline  Comprehensive Plan    No   \n",
       "...      ...            ...                  ...                 ...   ...   \n",
       "62920    JWT       Airlines               Online          Value Plan    No   \n",
       "62953    ART       Airlines               Online          Value Plan    No   \n",
       "63096    ART       Airlines               Online          Value Plan    No   \n",
       "63182    JWT       Airlines               Online          Value Plan    No   \n",
       "63183    JWT       Airlines               Online          Value Plan    No   \n",
       "\n",
       "       Duration                             Destination  Net_Sales  \\\n",
       "10           33  KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF      -26.0   \n",
       "105          11                                   INDIA       50.0   \n",
       "220           4                                   INDIA       62.0   \n",
       "367          16                                   INDIA       50.0   \n",
       "402           5                                MALAYSIA       29.0   \n",
       "...         ...                                     ...        ...   \n",
       "62920         2                                   INDIA       31.0   \n",
       "62953        14                                  FRANCE       59.0   \n",
       "63096        42                               HONG KONG       61.0   \n",
       "63182        21                                   INDIA       39.0   \n",
       "63183        49                                   INDIA       31.0   \n",
       "\n",
       "       Commision_(in_value)  Age  \n",
       "10                     9.10  118  \n",
       "105                   20.00  118  \n",
       "220                   24.80  118  \n",
       "367                   20.00  118  \n",
       "402                    9.57  118  \n",
       "...                     ...  ...  \n",
       "62920                 12.40  118  \n",
       "62953                 20.65  118  \n",
       "63096                 21.35  118  \n",
       "63182                 15.60  118  \n",
       "63183                 12.40  118  \n",
       "\n",
       "[984 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Age']>110]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ba3cfae7-5284-442e-bd11-060eda33a436",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.3 Data transformation\n",
    "\n",
    "# Define a dictionary to replace categorical values \n",
    "cleanup_nums = {\n",
    "        \"Distribution_Channel\": {\"Online\": 0, \"Offline\": 1},\n",
    "        \"Claim\": {\"Yes\": 0, \"No\": 1}, \n",
    "        \"Gender\": {\"M\": 0, \"F\": 1}, \n",
    "        \"Agency_Type\": {\"Travel Agency\": 0, \"Airlines\": 1}\n",
    "}\n",
    "\n",
    "# Replace categorical values with numeric \n",
    "df = df.replace(cleanup_nums)\n",
    "\n",
    "# Obtain one hot encoding with prefix as the column name \n",
    "df_t = pd.get_dummies(df, prefix=[\"Agency\", \"Destination\", \"Product_Name\"], columns=[\"Agency\", \"Destination\", \"Product_Name\"])\n",
    "\n",
    "# Replace negative duration with its mean \n",
    "df[\"Duration\"] = df[\"Duration\"].mask(df[\"Duration\"] < 0, df[\"Duration\"].mean())\n",
    "\n",
    "# Replace extreme age with its mean \n",
    "df[\"Age\"] = df[\"Age\"].mask(df[\"Age\"] > 110, df[\"Age\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "038374ab-eb7a-4da5-bce5-cd41aacdd64d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>mi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_Type</td>\n",
       "      <td>0.005431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Distribution_Channel</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Duration</td>\n",
       "      <td>0.004146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Net_Sales</td>\n",
       "      <td>0.009523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Commision_(in_value)</td>\n",
       "      <td>0.009991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Product_Name_Spouse or Parents Comprehensive Plan</td>\n",
       "      <td>0.000397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Product_Name_Ticket Protector</td>\n",
       "      <td>0.000071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Product_Name_Travel Cruise Protect</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>Product_Name_Travel Cruise Protect Family</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>Product_Name_Value Plan</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>197 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               feature        mi\n",
       "0                                          Agency_Type  0.005431\n",
       "1                                 Distribution_Channel  0.000000\n",
       "2                                             Duration  0.004146\n",
       "3                                            Net_Sales  0.009523\n",
       "4                                 Commision_(in_value)  0.009991\n",
       "..                                                 ...       ...\n",
       "192  Product_Name_Spouse or Parents Comprehensive Plan  0.000397\n",
       "193                      Product_Name_Ticket Protector  0.000071\n",
       "194                 Product_Name_Travel Cruise Protect  0.000000\n",
       "195          Product_Name_Travel Cruise Protect Family  0.000000\n",
       "196                            Product_Name_Value Plan  0.000000\n",
       "\n",
       "[197 rows x 2 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3.5 Feature selection\n",
    "# Subset columns for predictor and target variables \n",
    "X = df_t.loc[:, df_t.columns != \"Claim\"]\n",
    "y = df_t[\"Claim\"]\n",
    "\n",
    "# Compute the mutual information score\n",
    "mi_score = MIC(X,y, random_state=128)\n",
    "\n",
    "# Store the mutual information score information in a dataframe \n",
    "columns = {\"feature\": df_t.loc[:, df_t.columns != \"Claim\"].columns, \"mi\": mi_score}\n",
    "df_mi = pd.DataFrame(columns)\n",
    "df_mi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ecedc71-3a65-4741-b76b-96011aaa068a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store top 15 features into a list \n",
    "cols_to_keep = df_mi.nlargest(n=15, columns=[\"mi\"]).feature.unique().tolist()\n",
    "\n",
    "# # Subset the 15 features for predictor variable\n",
    "X = df_t[cols_to_keep]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82d4537f-eefe-4ab5-940b-13c06316d210",
   "metadata": {},
   "source": [
    "**4.0 Modelling and evaluation using Python**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2ae6ef7c-351c-4a54-9df4-d6a74001b153",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4.1 Train test split \n",
    "# Split data into 70% train and 30% test \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=128)\n",
    "\n",
    "# Oversample target variable to ensure data balance in target variable \n",
    "OS = SMOTE(random_state=128)\n",
    "X_train_OS, y_train_OS = OS.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dbd93da2-4202-43a1-b304-9113cb5664a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4.2 Model development \n",
    "# Build a random forest classifier\n",
    "rf = RandomForestClassifier(random_state=128)\n",
    "\n",
    "# Set parameters\n",
    "params = {\n",
    "    \"n_estimators\": range(25, 100, 25), \n",
    "    \"max_depth\": range(10, 50, 10), \n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"], \n",
    "    \"oob_score\" : [\"TRUE\", \"False\"]\n",
    "}\n",
    "\n",
    "# 4.4 Model tuning and scoring \n",
    "full_model = GridSearchCV(\n",
    "    rf, \n",
    "    param_grid=params, \n",
    "    cv=5, \n",
    "    n_jobs=-1, \n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e7013aac-25fa-41df-acd0-101a2f35d9f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 72 candidates, totalling 360 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chunh\\anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py:427: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=128),\n",
       "             n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: range(10, 50, 10),\n",
       "                         &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                         &#x27;n_estimators&#x27;: range(25, 100, 25),\n",
       "                         &#x27;oob_score&#x27;: [&#x27;TRUE&#x27;, &#x27;False&#x27;]},\n",
       "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=128),\n",
       "             n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: range(10, 50, 10),\n",
       "                         &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                         &#x27;n_estimators&#x27;: range(25, 100, 25),\n",
       "                         &#x27;oob_score&#x27;: [&#x27;TRUE&#x27;, &#x27;False&#x27;]},\n",
       "             verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=128)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=128)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=128),\n",
       "             n_jobs=-1,\n",
       "             param_grid={'max_depth': range(10, 50, 10),\n",
       "                         'max_features': ['auto', 'sqrt', 'log2'],\n",
       "                         'n_estimators': range(25, 100, 25),\n",
       "                         'oob_score': ['TRUE', 'False']},\n",
       "             verbose=1)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4.3 Model training and selection \n",
    "# Train model \n",
    "full_model.fit(X_train_OS, y_train_OS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "816deff7-36ba-4c24-b4ab-a4e45d024187",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy: 0.99\n",
      "Test accuracy: 0.95\n"
     ]
    }
   ],
   "source": [
    "# Make predictions \n",
    "predictions = full_model.predict(X_train_OS)\n",
    "\n",
    "# 4.5 Model evaluation\n",
    "# Train \n",
    "actual_train, predicted_train = y_train_OS, full_model.predict(X_train_OS)    # Compute the actual and predicted values for train dataset\n",
    "accuracy_train = accuracy_score(y_train_OS, full_model.predict(X_train_OS))    # View the accuracy score for train dataset\n",
    "tn_train, fp_train, fn_train, tp_train = confusion_matrix(actual_train, predicted_train).ravel()    # Construct a confusion matrix \n",
    "\n",
    "# Test \n",
    "actual_test, predicted_test = y_test, full_model.predict(X_test)    # Compute the actual and predicted values for test dataset\n",
    "accuracy_test = accuracy_score(y_test, full_model.predict(X_test))    # View the accuracy score for test dataset\n",
    "tn_test, fp_test, fn_test, tp_test = confusion_matrix(actual_test, predicted_test).ravel()\n",
    "\n",
    "print(f\"Train accuracy: {accuracy_train:.2f}\\nTest accuracy: {accuracy_test:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d840e519-bcc2-412f-858a-3ffec71d6bee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x2b16faf7700>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a confusion matrix for train data \n",
    "ConfusionMatrixDisplay.from_estimator(full_model, X_train_OS, y_train_OS, display_labels=['No', 'Yes'], cmap='GnBu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "87420051-4ee4-4ef3-b61e-b988d4ccc5c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x2b16fcd60a0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a confusion matrix for test data \n",
    "ConfusionMatrixDisplay.from_estimator(full_model, X_test, y_test, display_labels=['No', 'Yes'], cmap='GnBu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "eb157377-6b1e-4648-8be0-e0dc6de88a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build a XGB classifier\n",
    "Ridge = RidgeClassifier(random_state=128) # Build XGB classifiers\n",
    "\n",
    "# Set parameters\n",
    "params = {\n",
    "    'alpha':[200, 230, 250,265, 270, 275, 290, 300, 500]\n",
    "}\n",
    "\n",
    "# 4.4 Model tuning and scoring \n",
    "full_model2 = GridSearchCV(\n",
    "    Ridge, \n",
    "    param_grid=params, \n",
    "    cv=5, \n",
    "    n_jobs=-1, \n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "64b8a7e2-3aaf-4fd3-a0e3-2a6e26416733",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RidgeClassifier(random_state=128), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [200, 230, 250, 265, 270, 275, 290, 300,\n",
       "                                   500]},\n",
       "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RidgeClassifier(random_state=128), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [200, 230, 250, 265, 270, 275, 290, 300,\n",
       "                                   500]},\n",
       "             verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier(random_state=128)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier(random_state=128)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RidgeClassifier(random_state=128), n_jobs=-1,\n",
       "             param_grid={'alpha': [200, 230, 250, 265, 270, 275, 290, 300,\n",
       "                                   500]},\n",
       "             verbose=1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4.3 Model training and selection \n",
    "# Train model \n",
    "full_model2.fit(X_train_OS, y_train_OS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "78442c40-579f-465d-a612-8f31423d2bc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy: 0.76\n",
      "Test accuracy: 0.72\n"
     ]
    }
   ],
   "source": [
    "# Make predictions \n",
    "predictions = full_model2.predict(X_train_OS)\n",
    "\n",
    "# 4.5 Model evaluation\n",
    "# Train \n",
    "actual_train, predicted_train = y_train_OS, full_model2.predict(X_train_OS)    # Compute the actual and predicted values for train dataset\n",
    "accuracy_train = accuracy_score(y_train_OS, full_model2.predict(X_train_OS))    # View the accuracy score for train dataset\n",
    "tn_train, fp_train, fn_train, tp_train = confusion_matrix(actual_train, predicted_train).ravel()\n",
    "\n",
    "# Test \n",
    "actual_test, predicted_test = y_test, full_model2.predict(X_test)    # Compute the actual and predicted values for test dataset\n",
    "accuracy_test = accuracy_score(y_test, full_model2.predict(X_test))     # View the accuracy score for test dataset\n",
    "tn_test, fp_test, fn_test, tp_test = confusion_matrix(actual_test, predicted_test).ravel()\n",
    "\n",
    "print(f\"Train accuracy: {accuracy_train:.2f}\\nTest accuracy: {accuracy_test:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "14ba7b17-4979-4baa-91b5-2e39d6bd2f3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x2b16faed550>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a confusion matrix for train data \n",
    "ConfusionMatrixDisplay.from_estimator(full_model2, X_train_OS, y_train_OS, display_labels=['No', 'Yes'], cmap='GnBu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "87489e2c-0f14-47f3-ab1d-e1fcd30c690d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x2b16f400310>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a confusion matrix for train data \n",
    "ConfusionMatrixDisplay.from_estimator(full_model2, X_test, y_test, display_labels=['No', 'Yes'], cmap='GnBu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "796a6eef-31da-4b65-a466-d3c9f2bc544a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random forest returns the best accuracy at 95% compared to ridge classifier at 72%\n",
    "# Random forest model has the ability to distinguish those who make a travel insurance claim (the minority class) better than of ridge classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07cbbc5e-92c2-4d1f-8420-2fdd7c7ebe4d",
   "metadata": {},
   "source": [
    "**References**\n",
    "\n",
    "https://pandas.pydata.org/docs/reference/frame.html <br>\n",
    "https://matplotlib.org/stable/api/matplotlib_configuration_api.html <br>\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html <br>\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifier.html <br>\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html <br>\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html <br> \n",
    "https://imbalanced-learn.org/stable/references/generated/imblearn.over_sampling.SMOTE.html <br> \n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_classif.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
